#!/bin/bash
# 16S扩增子操作手册 16S Amplicon pipeline manual, v1.3 2017/12/1
# 按如下命令执行，并修改makefile.16s中的参数
cd /mnt/bai/yongxin/rice/miniCore


# 0. 配置实验参数
# 复制最新版流程+配置文件+操作手册
cp ~/wheat/profile/makefile* ./
# 修改工作目录wd
pwd
# 初始化工作目录

# 人工制作实验设计：将实验编号替换为样品名称
# 在editplus中用正则将SampleID原始实验设计样品后字母替换掉，添加GroupOld组，再重新SampleID
cd doc/
awk 'BEGIN{OFS="\t";FS="\t"} NR==FNR {a[$1]=$2"\t"$3"\t"$2$3"\t"$2$3} NR>FNR {print $0,a[$6]$7}' design0_materialID.txt design1_raw.txt | cut -f 11,1-3,10,8-9 | sed 's/#SampleID/GroupID/' | sed 's/#Sample\tID/variety\tDescription/' |sed 's/#SampleIDreplicate/#SampleID/' > design2_clean.txt
# 添加新的样品名、组名和信息
paste <(cut -f 7 design2_clean.txt) <(cut -f 1-3 design2_clean.txt) <(cut -f 6 design2_clean.txt) <(cut -f 4-5 design2_clean.txt) | sed 's/^\t//;s/\t*$//g;s/ //g'> design3_order.txt # 重新排序
split_design.pl -i design3_order.txt # 按库拆分为mappingfile

make init
# 编辑并上传实验设计至doc/，必选(mappingfiles/summary/material/library/group_compare), 可选(group_venn, group_tern)
dos2unix doc/*

# 上传原始数据*.fq.gz至clean_data/
# HN下20个库
for i in `tail -n+2 doc/library.txt|cut -f 2|head -n 20`;do
	ln ~/seq/171213.lane5.miniCoreHN/${i}_1.fq.gz clean_data/${i}_1.fq.gz
	ln ~/seq/171213.lane5.miniCoreHN/${i}_2.fq.gz clean_data/${i}_2.fq.gz
done
# LN下20个库
for i in `tail -n+2 doc/library.txt|cut -f 2|tail -n 20`;do
	ln ~/seq/171221.lane6.reseq/raw/lane6/${i}_1.fq.gz clean_data/${i}_1.fq.gz
	ln ~/seq/171221.lane6.reseq/raw/lane6/${i}_2.fq.gz clean_data/${i}_2.fq.gz
done
# 删除部分更新文库的的完成标准 qc merge
for i in `seq 1 20`;do
#	rm L${i}.merge
	fastqc L${i}_1.fq.gz --quiet --extract &
done

# 简化文件名(可选) rename 's/Med-//g;s/_HLY73BCXY_L1//g;s/clean\.//g' *.gz 
# 原始数据文件名重命名为L1/2/3_1/2.fq.gz，并格式化文本信息
make rename
# 基于mappingfile生成实验设计
cat <(head -n1 doc/L1.txt|sed 's/#//g') doc/L* |grep -v '#' > doc/design.txt
# 修改文库列表list
ll clean_data/*.gz|cut -f 2 -d '/'|cut -f 1 -d '_'|sort -u|tr "\n" " "
# tail -n+2 doc/library.txt |cut -f 1|tr "\n" " " # 另一种方法，但需要有library.txt
# 显示实验设计,修改实验的主要和次要分组类型g1/g2，如groupID, genotype, compartment, soiltype，没有g2可使用默认batch
head doc/design.txt
# 获取主、次、第三分组信息：具体根据实验设计进一步筛选
tail -n+2 doc/design.txt|cut -f 5|sort|uniq|awk '{print "\""$1"\""}'|tr "\n" ","
# 最简单的实验只需一组信息，第二组填batch和1；复杂实验需要次、三分组信息
# 仔细全文阅读配置文件，修改所有与本项目相关参数



# 1. 数据质控
make qc # 原始数据质控
make merge # 双端数据合并再质控
make extract_barcodes # 提取样本的barcodes
make split # 拆分样品
make cutadapt # 切除双端接头
make stat # 统计文库各步操作stat each library
make multiqc # 汇总数据合并前后的评估报告

grep -v -c '#' doc/L* | sed 's/doc\/L//;s/.txt:/\t/' | sort -k1,1n # 统计各库中样品数据
cut -f 1,18 clean_data/multiqc_data/multiqc_fastqc.txt|grep '_1'|sed 's/L//;s/_1//;s/\.0//'|sort -k1,1n # 展示库数据量，数据列可变，有可能为13，19


# 2. 标准流程
make merge_library # 合并所有文库，并简单统计绘图
make derep # 数据去冗余
make unoise # 鉴定生物特征序列
make rm_chimeras # (可选)去嵌合体，执行完Unoise后，不执行此步可直接跳过
make otu_table # 生成OTU表
make assign_tax # 基于gg13.8注释物种
make tree # 构建进化树，用于多样性分析
make alpha # 计算alpha多样性
make alpha_usearch_rare # (可选)，采用usearch结果绘制
make alpha_qiime_rare # (可选)，采用qiime进行稀释曲线分析，大量抽样比较费时；可继续运行其它步骤
make beta # 计算beta多样性
make graphlan # 绘制高丰度物种树
make ggtree # 绘制高丰度进化树
make diversity # 多样性绘制箱线和散点

cat result/qc.sum # 显示数据量统计


# 3. 个性分析
make filter # 过滤高丰度菌分析，默认0.05%。如lefse只有1%，ruben文章常用0.5-0.1%
make rediv # 新表重新多样性分析
make draw_div # 多样性绘图
make draw_tax # 物种门-属级别比较
make draw_otu # OTUs水平差异比较
make draw_ter # OTUs三元图比较
make rmd # 生成可读性报告 write report 



# 4. 可选高级分析
make culture_graphlan # 绘制高丰度菌可培养比例物种树

# 5. 新功能测试 
# rarefraction
alpha_rare_usearch.sh -d /mnt/bai/yongxin/wheat/NP/doc/design.txt -m FALSE -A groupID -B '"BSNP","RsBDHNP","BDHNP"' -C compartment -D '"rhizosphere","root","soil"' -o result -g TRUE -h 5 -w 8 -s 7

# 准备NCBI上传文件
cd ~/rice/miniCore

split_libraries_fastq.py -i temp/L1_barcode/reads.fastq \
 -o temp/split \
 -b temp/L1_barcode/barcodes.fastq \
 -m doc/L1.txt --store_demultiplexed_fastq --barcode_type 10


split_fastq_qiime.pl -i temp/split/seqs.fastq -o split/
cd /mnt/bai/yongxin/ath/jt.terpene.16S/batch4/split
pigz *



# 常见问题
1. split_libraries_fastq.py: incorrect value for phred_offset
A: 修改phred_score 33/64
2. 批处理文库
for i in L1 L2 L3 L4 L5 L6 L7 L8 L9 L10; do
	unzip ${i}_1_fastqc.zip
	unzip ${i}_2_fastqc.zip
done

2. miniCore LN的文库中clean数据极少，将一个数据级
检查qc.sum文件发现是merge中绝大多数无法合并
检查右端质量L21与L1比较，发现L21从135以后，质量进差，甚至中位数全接近最小值。


# SNP data
su chulab
cd ~/miniCore

# 所有原始数据，包括1.5, 20x, 30x
scp -r -P 6488 public@210.75.224.141:/mnt/bull/minicore/fastq/* ./
# 所有bam文件
scp -r -P 6488 public@210.75.224.141:/mnt/hare/turnaround/bam/* bam
# 拷贝所有1.5X鉴定的SNp
scp -r -P 6488 public@210.75.224.141:/home/hongru/work/project/gwas/minicore/shareData snp1.5x
# 描述 https://www.evernote.com/l/AIdhU0FPscJPeIoad2266AjbGkatwAly6Ro
# scp OTU_table至chulab
scp -P 6488 result/otu_table.txt public@210.75.224.141:~/minicore/

cd ~/rice/miniCore/mwas/genotype
cp /mnt/zhou/chulab/miniCore/snp1.5x/*.bed ./
cp /mnt/zhou/chulab/miniCore/snp1.5x/*.bim ./
cp /mnt/zhou/chulab/miniCore/snp1.5x/*.fam ./
# plink主页 http://www.cog-genomics.org/plink2/
# 下载并解压
wget http://www.cog-genomics.org/static/bin/plink171220/plink_linux_x86_64.zip
unzip plink_linux_x86_64.zip
# 批处理bed为ped和vcf
for i in `seq 1 12`; do
	./plink --bfile Chr${i} --out Chr${i} --recode
	./plink --bfile Chr${i} --out Chr${i} --recode vcf
done

# tassel5主页 http://www.maizegenetics.net/tassel
wget https://tassel.bitbucket.io/installer/TASSEL_5_unix.sh
chmod +x TASSEL_5_unix.sh
./TASSEL_5_unix.sh
# 批处理ped为hmp
for i in `seq 1 12`;do
~/bin/TASSEL5/run_pipeline.pl -plink -ped  Chr${i}.ped -map Chr${i}.map  -export Chr${i} -exportType Hapmap -Xmx50g
done 

# 筛选基因型只留引起AA变化的SNP，再制作基因型与样品名对应的文件
## 注释位点
cd ~/software/snpeff/snpEff
java -jar snpEff.jar databases | less -S 
java -Xmx4g -jar snpEff.jar Oryza_sativa ~/rice/miniCore/mwas/genotype/Chr10.vcf > ~/rice/miniCore/mwas/genotype/Chr10.ann.vcf
grep 'missense' ~/rice/miniCore/mwas/genotype/Chr10.ann.vcf|wc -l # 10号染色体有156849个SNPs，3586有错意变化，2.2%引起AA变化
# 筛选非同义突变/可引起AA变化的SNP，用于GWAS分析
cd ~/rice/miniCore/mwas/genotype
mkdir snpeff
mkdir missense
for i in `seq 1 12`;do
# vcf注释：v输出处理过程，t多线程，Oryza物种选择，-no-downstream -no-intergenic -no-intron -no-upstream -no-utr可过滤指定区域 
#java -Xmx4G -jar ~/software/snpeff/snpEff/snpEff.jar -v -t Oryza_sativa Chr${i}.vcf > snpeff/Chr${i}.vcf
# 筛选missense引起AA变化的SNP
cat <(grep '^#' snpeff/Chr${i}.vcf) <(grep 'missense' snpeff/Chr${i}.vcf) > missense/Chr${i}.vcf
done




## OTU表准备
#去除format_taxonomy2full.pl不天加编号用于qiime合并
make filter
#原始表51993 OTUs，非零密度仅0.079；过滤单样品5/10000(2346个样品中每万个结果中都检测不到5个reads)后，得到6378，0.312，对高丰度OTU表及合并的属进行分析
wc -l result_k1-c/sum_taxa/otu_table_tax_L6.txt # 733个属
make group_merge # 按组合并
# 查看标准化百分比组均值合并结果
less -S result_k1-c/otu_table_group.txt
# 筛选HN表
cat <(head -n1 result_k1-c/otu_table_group.txt) <(grep -P 'H\t' result_k1-c/otu_table_group.txt) | sed 's/H\t/\t/g' > result_k1-c/otu_table_HN.txt
cat <(head -n1 result_k1-c/otu_table_group.txt) <(grep -P 'L\t' result_k1-c/otu_table_group.txt) | sed 's/L\t/\t/g' > result_k1-c/otu_table_LN.txt
## OTU表HN部分样品PCoA按地区着色，无规律
awk 'BEGIN{OFS=FS="\t"} NR==FNR {a[$2]=$12} NR>FNR {print $0,a[$6]}' doc/minicore_list.txt doc/design.txt |sed '1 s/$/Region/'|sed 's/\t$/\tUnknown/' > doc/design1.txt
## OTU表HN部分样品PCoA按类型着色
awk 'BEGIN{OFS=FS="\t"} NR==FNR {a[$2]=$13} NR>FNR {print $0,a[$6]}' doc/minicore_list.txt doc/design.txt |sed '1 s/$/Region/'|sed 's/\t$/\tUnknown/' > doc/design1.txt
cut -f 6,8 /mnt/bai/yongxin/rice/miniCore/doc/design1.txt | grep -P 'IND$|TEJ$|TRJ$'|sort|uniq>design.region # 筛选三大类
cut -f 13 doc/minicore_list.txt|sort|uniq -c|sort -k1,1nr # 查看主要类群，手动选择前四大组 pca_HN.r pca_LN.r；仅选3大类群CPCoA_LN_3subspecies.r，输出结果为CPCoA12.txt，结果无显著SNP位点。
# 再以0为中心筛选CPCoA完美结果，在GAPIT目录中运行
Rscript CPCoA_LN.r &


# 基于mwas/microbiome中
cd ~/rice/miniCore/mwas/microbiome
cut -f 1 ../genotype/Chr10.ped -d ' ' > genotype.list # 获得所有基因型
cat <(head -n 1 otu_table_HN.txt) <(awk 'BEGIN{OFS=FS="\t"} NR==FNR {a[$1]=$0} NR>FNR {print a[$0]}' otu_table_HN.txt genotype.list |grep -P '\t') > otu_table_HN_196.txt # 筛选与基因数据对应的196个样品
# 筛选Top10 OTU并制作gapit需要表型
cut -f 1-11 otu_table_HN_196.txt|sed '1 s/ID/Taxa/' > otu_table_HN_196_top1_gapit.txt
# 筛选Top10 OTU表给gemma
mv otu_table_HN_196_top10_gemma.txt otu_table_HN_gemma.fim

# 按属相对丰度表合并 -f sum_taxa/otu_table_tax_L6.txt -F otu_table_group_L6.txt
make group_merge # g1_list筛选HN,LN获得标准化的OTUs result_k1-c/otu_table_group_L6_H/LN.txt，再用matrix_calcuate.r计算相减结果


# 基因型
cp /mnt/zhou/chulab/miniCore/snp1.5x/* ~/rice/miniCore/mwas/genotype/

几个和N相关的词：ammonia、nitrite、

# 氮相关菌丰度
# 基于FAPROTAX 1.1 2017数据库
make faprotax_calc # 诸循环相关OTU表，获得faprotax/otu_table_tax.faprotax
make group_merge_FAR # 按HN和LN设置筛选数据，按组合并
# 矩阵计算，两个表格HN相差LN，再除以表HN，代码在matrix_calcuate.r

# 附1. 氮相关菌之前在分析sd1的FARPROTAX分析中中发现nitrate_ammonification、nitrite_respiration和nitrite_ammonification存在差异
nitrate_denitrification	dissimilatory reduction of NO3 to N2	硝酸盐脱氮化/反硝化作用
nitrite_denitrification	dissimilatory reduction of NO2 to N2	亚硝酸型反硝化
nitrous_oxide_denitrification	dissimilatory reduction of N2O to N2	一氧化二氮反硝化作用
nitrate_ammonification	dissimilatory reduction of nitrate to ammonium (DNRA)	硝酸盐氨化作用
nitrate_respiration	dissimilatory nitrate respiration	硝酸盐呼吸，包括nitrate_denitrification和nitrate_ammonification
nitrate_reduction



## GAPIT: 
cd /mnt/bai/yongxin/rice/miniCore/mwas/GAPIT
1. 分析高氮中前10个OTUs；OTU_HN_top10.r
2. 分析氯酸盐数据：chlorate_gapit.r 被证实与NRT1.1b相关
用水稻NRT1.1B的LOC_Os10g40600(NG 2015 Figure 1)，在phytozome上查到	Chr10:21757768..21762202 reverse，	peptide transporter PTR2, putative, expressed；RGAP中也查到同样结果。
awk '{FS=OFS=","} {if($2==10&&$3>21757768&&$3<21762202)print $0}' GAPIT..chlorate_sensitivity.GWAS.Results.csv # 筛选基因座上SNP 37个
报导的两个SNP分别为980C>T和1335G>C，在IGV中加载chr10.vcf发现snp1为10m21759092，snp2在igv图中和坐标21758737均没有，手动检查snp1分组是否有显著差异
# 筛选10m21759092行和表头
cat <(head -n 7 ../genotype/Chr10.vcf|tail -n 1) <(grep '10m21759092' ../genotype/Chr10.vcf) > 10m21759092.vcf
# 替换0/0为G($4)，1/1为A($5)
sed -i 's/#//;s/0\/0/G/g;s/1\/1/A/g' 10m21759092.vcf 
# 在excel中转置，并选择所有基因型
cut -f 2 -d '_' 10m21759092.txt > 10m21759092.geno
# 添加亚种分类
awk 'BEGIN{OFS=FS="\t"} NR==FNR {a[$2]=$13} NR>FNR {print $0,a[$1]}' ../../doc/minicore_list.txt 10m21759092.geno  | sort -k3,3 -k2,2 | sed 's/\t$/\tNA/' > 10m21759092.subspecies # 查看按基因型分组还不错
# 添加氯酸盐数据
awk 'BEGIN{OFS=FS="\t"} NR==FNR {a[$1]=$2} NR>FNR {print $0,a[$1]}' /mnt/bai/yongxin/rice/miniCore/mwas/phenotype/chlorate_gapit.txt 10m21759092.subspecies |grep -v -P '\t$' > 10m21759092.chlorate # 查看按基因型分组还不错
cut -f 3 10m21759092.chlorate|sort|uniq -c # 各品种数量
# R统计组间差异 
Aov_TukeyHSD.xls

3. 分析farpotaxLN数据：faprotax_LN.r
4. 分析amylose数据：positive_control.r，结果Chr6:1765761与MP文章一致
5. 分析NTT1.1b在206个基因型上伪数据模拟A-100, G-1
cat <(echo -e 'Taxa\tSimulate') <(sed 's/A$/100/;s/G$/1/' 10m21759092.geno) > simulate_nrt_value.txt
cp chlorate_gapit.r simulate_gapit.r # 修改为指定文件
再编写simulate1_2, 1_4, 1_8的均值，标准差为10%的值进行分析。结果均有显著差异，以后尝试1_2即可。
降低群体数量只包含IND, TEJ和TRJ的两或三种，再用1，2且50%波动模拟数据；均可得到10号位点的peaks

## NRT1.1b中引起AA变化的位点10m21759092与菌群数据分组比较，~/rice/miniCore/mwas/GAPIT/10m21759092.subspecies文件中IND主要为A(T)，而TEJ和TRJ为G(C)
## 还分otu, geneus, faprotax 条件下的HN, LN, HNsLN, HNdLN
cd ~/rice/miniCore/mwas/
# 位点基因型文件 GAPIT/10m21759092.geno , OTU数据 microbiome/otu_table_HN.txt
Rscript nrt1.1b_microbiome_anova.r # 以分组信息对所有基因型比较，并绘制箱线图展示
sort -k3,3gr -k6,6g nrt1.1b/Aov_TukeyHSD.xls|less > nrt1.1b/Aov_TukeyHSD.sortp # g按数值科学计算法从小到大排序，先丰度再pvalue
awk 'BEGIN{OFS=FS="\t"} NR==FNR {a[$1]=$0} NR>FNR {print $0,a[$1]}' ../result_k1-c/rep_seqs_tax.txt nrt1.1b/Aov_TukeyHSD.sortp | cut -f 1-3,6,9- > nrt1.1b/Aov_TukeyHSD.2tax
head nrt1.1b/Aov_TukeyHSD.2tax
firefox nrt1.1b/OTU_3.pdf # 查看差异最显著的OTUs
# 发现前10中Burkholderiales、Rhizobiales都是TEJ(G)中高？
sort -k3,3gr -k6,6g nrt1.1b/otu_LN_Aov_TukeyHSD.xls|less > nrt1.1b/Aov_TukeyHSD.sortp # g按数值科学计算法从小到大排序，先丰度再pvalue
awk 'BEGIN{OFS=FS="\t"} NR==FNR {a[$1]=$0} NR>FNR {print $0,a[$1]}' ../result_k1-c/rep_seqs_tax.txt nrt1.1b/Aov_TukeyHSD.sortp | cut -f 1-3,6,9- > nrt1.1b/Aov_TukeyHSD.2tax
head nrt1.1b/Aov_TukeyHSD.2tax
firefox nrt1.1b/OTU_3.pdf # 查看差异最显著的OTUs
# 发现前10中Burkholderiales、Rhizobiales都是TEJ(G)中高？


# 拆分样品

	cd ~/rice/miniCore/
	mkdir -p clean_data/sample/
	
parallel -j 24 \
"split_libraries_fastq.py -i temp/{1}_barcode/reads.fastq \
 -o temp/{1}_split \
 -b temp/{1}_barcode/barcodes.fastq \
 -m doc/{1}.txt --store_demultiplexed_fastq --barcode_type 10; \
 split_fastq_qiime.pl -i temp/{1}_split/seqs.fastq -o clean_data/sample/" \
 ::: `tail -n+2 doc/library.txt | cut -f 1`

	pigz clean_data/sample/*